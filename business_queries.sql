-- ============================================================
-- BetterCharge: Board-Ready SQL Bundle (DuckDB)
-- Purpose: Provide 3 SQL queries that answer key business questions
-- Inputs:  data/transactions_with_amount_usd.csv
--          data/users_aligned_simple.csv
-- Outputs: out/revenue_by_merchant_category.csv
--          out/confusion_matrix_risk_score.csv
--          out/payment_method_integration_success.csv
-- Engine:  DuckDB
-- ============================================================

------------------------------------------------------------
-- Enable Excel/CSV support
------------------------------------------------------------
INSTALL excel;
LOAD excel;

------------------------------------------------------------
-- Load transactions
------------------------------------------------------------
CREATE OR REPLACE VIEW transaction_with_amount_usd AS
SELECT * FROM read_csv_auto('data/transactions_with_amount_usd.csv');

------------------------------------------------------------
-- OPTIONAL: Load users
------------------------------------------------------------
CREATE OR REPLACE VIEW users_aligned_simple AS
SELECT * FROM read_csv_auto('data/users_aligned_simple.csv');

-- Normalize keys
CREATE OR REPLACE TEMP VIEW transactions_norm AS
SELECT LOWER(TRIM(user_id)) AS user_id_key, t.*
FROM transaction_with_amount_usd t;

CREATE OR REPLACE TEMP VIEW users_norm AS
SELECT LOWER(TRIM(user_id)) AS user_id_key, u.*
FROM users_aligned_simple u;

-- ============================================================
-- QUERY 1: Financial Reporting — Revenue by merchant category
-- ------------------------------------------------------------
-- Business question:
--   What is the total revenue (in USD) generated by each merchant category?
-- Key assumptions:
--   - Only 'success' transactions contribute to revenue.
--   - amount_usd is reliable and already converted.
-- Confidence level: HIGH
-- ============================================================
CREATE OR REPLACE TEMP VIEW revenue_by_merchant_category AS
SELECT
    merchant_category,
    SUM(amount_usd) AS total_amount_usd,
    COUNT(*) AS total_transactions,
    SUM(CASE WHEN status = 'success' THEN 1 ELSE 0 END) AS successful_transactions,
    ROUND(100.0 * SUM(CASE WHEN status = 'success' THEN 1 ELSE 0 END)::DOUBLE / COUNT(*), 2) AS success_rate_pct
FROM transaction_with_amount_usd
GROUP BY merchant_category
ORDER BY total_amount_usd DESC;

COPY (SELECT * FROM revenue_by_merchant_category)
TO 'out/revenue_by_merchant_category.csv' (HEADER, DELIMITER ',');

-- ============================================================
-- QUERY 2: Product Insights — Risk score confusion matrix
-- ------------------------------------------------------------
-- Business question:
--   How well does risk_score predict failed transactions?
-- Key assumptions:
--   - risk_score >= 0.5 is considered “high risk”.
--   - status = 'failed' means actual failure.
-- Confidence level: MEDIUM
-- ============================================================

COPY (
  -- Risk score confusion matrix for multiple thresholds

    WITH thresholds AS (
        SELECT * FROM (VALUES
            (0.50), (0.55), (0.60), (0.65), (0.70), (0.75), (0.80)
        ) AS t(threshold)
    ),
    base AS (
        SELECT transaction_id, risk_score, status
        FROM transaction_with_amount_usd
        WHERE risk_score IS NOT NULL
    ),
    labeled AS (
        SELECT
            th.threshold,
            CASE WHEN b.risk_score >= th.threshold THEN 1 ELSE 0 END AS predicted_high_risk,
            CASE WHEN b.status = 'failed' THEN 1 ELSE 0 END AS actual_failure
        FROM base b
        CROSS JOIN thresholds th
    ),
    cm AS (
        SELECT
            threshold,
            SUM(CASE WHEN predicted_high_risk = 1 AND actual_failure = 1 THEN 1 ELSE 0 END) AS true_positives,
            SUM(CASE WHEN predicted_high_risk = 1 AND actual_failure = 0 THEN 1 ELSE 0 END) AS false_positives,
            SUM(CASE WHEN predicted_high_risk = 0 AND actual_failure = 1 THEN 1 ELSE 0 END) AS false_negatives,
            SUM(CASE WHEN predicted_high_risk = 0 AND actual_failure = 0 THEN 1 ELSE 0 END) AS true_negatives
        FROM labeled
        GROUP BY threshold
    )
    SELECT
        threshold,
        true_positives,
        false_positives,
        false_negatives,
        true_negatives,
        ROUND(true_positives * 100.0 / NULLIF(true_positives + false_positives, 0), 2) AS precision_percentage,
        ROUND(true_positives * 100.0 / NULLIF(true_positives + false_negatives, 0), 2) AS recall_percentage,
        ROUND((true_positives + true_negatives) * 100.0 / NULLIF(true_positives + false_positives + false_negatives + true_negatives, 0), 2) AS accuracy_percentage
    FROM cm
    ORDER BY threshold

) TO 'out/confusion_matrix_risk_score.csv' (HEADER, DELIMITER ',');


-- ============================================================
-- QUERY 3: Strategic Assessment — Payment method integration success
-- ------------------------------------------------------------
-- Business question:
--   How successful are different payment methods after the partner integration?
-- Key assumptions:
--   - status ∈ {'success','failed'}.
--   - High success rate indicates better integration performance.
-- Confidence level: HIGH
-- ============================================================
CREATE OR REPLACE TEMP VIEW payment_method_integration_success AS
SELECT
    payment_method,
    COUNT(*) AS total_attempts,
    SUM(CASE WHEN status = 'success' THEN 1 ELSE 0 END) AS successes,
    SUM(CASE WHEN status = 'failed'  THEN 1 ELSE 0 END) AS failures,
    ROUND(100.0 * SUM(CASE WHEN status = 'success' THEN 1 ELSE 0 END)::DOUBLE / COUNT(*), 2) AS success_rate_pct,
    ROUND(100.0 * SUM(CASE WHEN status = 'failed'  THEN 1 ELSE 0 END)::DOUBLE / COUNT(*), 2) AS failure_rate_pct
FROM transaction_with_amount_usd
GROUP BY payment_method
ORDER BY total_attempts DESC, successes DESC;

COPY (SELECT * FROM payment_method_integration_success)
TO 'out/payment_method_integration_success.csv' (HEADER, DELIMITER ',');

-- ============================================================
-- End of file
-- ============================================================
